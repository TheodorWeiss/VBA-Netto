Option Explicit

Public Sub HighlightPonholzMatches()
    '=== SETTINGS ===
    Dim ws As Worksheet
    Set ws = ActiveSheet          ' or: Set ws = ThisWorkbook.Worksheets("Werbung_Reordered")
    
    Dim colA As Long: colA = 1    ' Column A
    Dim colB As Long: colB = 2    ' Column B
    
    '--- find the header rows for Ponholz and Erfurt
    Dim rowPonholz As Long, rowErfurt As Long, lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, colA).End(xlUp).Row
    
    rowPonholz = FindInColumn(ws, colA, "Ponholz")
    rowErfurt = FindInColumn(ws, colA, "Erfurt")
    If rowPonholz = 0 Then
        MsgBox "City 'Ponholz' not found in column A.", vbExclamation: Exit Sub
    End If
    If rowErfurt = 0 Then
        MsgBox "City 'Erfurt' not found in column A.", vbExclamation: Exit Sub
    End If
    
    '--- determine end of Ponholz block (next bold city header below Ponholz)
    Dim ponholzEnd As Long
    ponholzEnd = NextCityHeaderRow(ws, rowPonholz + 1, lastRow, colA)
    If ponholzEnd = 0 Then ponholzEnd = lastRow + 1   ' if Ponholz is the last block
    
    '--- build a map: key = text in column A, value = set of article numbers from column B
    Dim mapPonholz As Object
    Set mapPonholz = BuildABMap(ws, rowPonholz + 1, ponholzEnd - 1, colA, colB)
    
    '--- iterate from Erfurt to the end and bold-match numbers in B
    Dim r As Long
    For r = rowErfurt To lastRow
        'skip city header lines (bold city names in A)
        If Len(ws.Cells(r, colA).Value2) > 0 And ws.Cells(r, colA).Font.Bold = True Then
            'header row -> continue
        Else
            Dim keyA As String
            keyA = Trim(CStr(ws.Cells(r, colA).Value2))
            
            If mapPonholz.Exists(keyA) Then
                Dim cellB As Range
                Set cellB = ws.Cells(r, colB)
                
                'Clear previous bold formatting in this cell only
                If Len(cellB.Value2) > 0 Then
                    cellB.Characters(1, Len(cellB.Value2)).Font.Bold = False
                End If
                
                'Bold only those numbers that are present in Ponholz for the same A
                BoldMatchingNumbers cellB, mapPonholz(keyA)
            End If
        End If
    Next r
End Sub

'===================== Helpers =====================

Private Function FindInColumn(ws As Worksheet, colIdx As Long, ByVal textToFind As String) As Long
    'Return the row of the first exact match in column; 0 if not found
    Dim f As Range
    Set f = ws.Columns(colIdx).Find(What:=textToFind, LookAt:=xlWhole, LookIn:=xlValues, _
                                    SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
    If Not f Is Nothing Then
        FindInColumn = f.Row
    Else
        FindInColumn = 0
    End If
End Function

Private Function NextCityHeaderRow(ws As Worksheet, startRow As Long, lastRow As Long, colA As Long) As Long
    'City headers are bold + non-empty in column A
    Dim r As Long
    For r = startRow To lastRow
        If Len(ws.Cells(r, colA).Value2) > 0 And ws.Cells(r, colA).Font.Bold = True Then
            NextCityHeaderRow = r
            Exit Function
        End If
    Next r
    NextCityHeaderRow = 0
End Function

Private Function BuildABMap(ws As Worksheet, r1 As Long, r2 As Long, colA As Long, colB As Long) As Object
    'Build dictionary: key = A text; value = Dictionary of numbers from B
    Dim dict As Object: Set dict = CreateObject("Scripting.Dictionary")
    Dim re As Object: Set re = CreateObject("VBScript.RegExp")
    re.Global = True
    re.IgnoreCase = True
    re.Pattern = "\d+"
    
    Dim r As Long, keyA As String, txtB As String, m As Object
    For r = r1 To r2
        keyA = Trim(CStr(ws.Cells(r, colA).Value2))
        If keyA <> vbNullString Then
            txtB = CStr(ws.Cells(r, colB).Value2)
            If Not dict.Exists(keyA) Then dict.Add keyA, CreateObject("Scripting.Dictionary")
            If Len(txtB) > 0 Then
                For Each m In re.Execute(txtB)
                    If Not dict(keyA).Exists(m.Value) Then dict(keyA).Add m.Value, True
                Next m
            End If
        End If
    Next r
    
    Set BuildABMap = dict
End Function

Private Sub BoldMatchingNumbers(ByVal targetCell As Range, ByVal setNumbers As Object)
    'Bold only those numeric substrings in targetCell that are present in setNumbers
    Dim txt As String: txt = CStr(targetCell.Value2)
    If Len(txt) = 0 Then Exit Sub
    
    Dim re As Object: Set re = CreateObject("VBScript.RegExp")
    re.Global = True
    re.IgnoreCase = True
    re.Pattern = "\d+"
    
    Dim matches As Object, m As Object
    Set matches = re.Execute(txt)
    
    For Each m In matches
        If setNumbers.Exists(m.Value) Then
            'VBScript.RegExp gives 0-based FirstIndex
            targetCell.Characters(m.FirstIndex + 1, m.Length).Font.Bold = True
        End If
    Next m
End Sub
